package domain

const (
	// –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
	ButtonPrefixProduct  = "add_product_"     // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É)
	ButtonPrefixCategory = "choose_category_" // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
	ButtonPrefixDrop     = "drop_"            // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–ª–±–µ–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
)

const (
	// –ü–æ–ª–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö
	CallbackStartOrder   = "start_order"    // –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
	CallbackCategoryMenu = "category_menu"  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	CallbackOrderDrop    = "drop_from_cart" // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
	CallbackMakeOrder    = "make_order"     // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
	CallbackOrdersList   = "old_orders"     // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤
)

const (
	// –ü–æ–ª–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö
	CloseOrder   = "close_order"
	ApproveOrder = "approve_order"
)

var (
	Categories = []Category{
		{
			ID:   "coffee",
			Name: "‚òïÔ∏è –ö–æ—Ñ–µ",
			Products: []Product{
				{ID: "espresso", Name: "–≠—Å–ø—Ä–µ—Å—Å–æ", Price: 120},
				{ID: "cappuccino", Name: "–ö–∞–ø—É—á–∏–Ω–æ", Price: 180},
				{ID: "latte", Name: "–õ–∞—Ç—Ç–µ", Price: 200},
				{ID: "americano", Name: "–ê–º–µ—Ä–∏–∫–∞–Ω–æ", Price: 150},
				{ID: "raf", Name: "–†–∞—Ñ", Price: 250},
				{ID: "flatwhite", Name: "–§–ª—ç—Ç –£–∞–π—Ç", Price: 220},
			},
		},
		{
			ID:   "food",
			Name: "üçΩ –ï–¥–∞",
			Products: []Product{
				{ID: "croissant", Name: "–ö—Ä—É–∞—Å—Å–∞–Ω", Price: 150},
				{ID: "sandwich", Name: "–°—ç–Ω–¥–≤–∏—á", Price: 250},
				{ID: "salad", Name: "–°–∞–ª–∞—Ç", Price: 350},
				{ID: "cake", Name: "–ü–∏—Ä–æ–∂–Ω–æ–µ", Price: 200},
				{ID: "muffin", Name: "–ú–∞—Ñ—Ñ–∏–Ω", Price: 180},
				{ID: "cookie", Name: "–ü–µ—á–µ–Ω—å–µ", Price: 100},
			},
		},
	}

	// –ö–∞—Ä—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
	ProductsMap = make(map[string]Product)
)

func init() {
	// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
	for _, category := range Categories {
		for _, product := range category.Products {
			product.Category = category.ID
			ProductsMap[product.ID] = product
		}
	}
}
